// <auto-generated />
using System;
using GymBackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymBackEnd.Data.Migrations
{
    [DbContext(typeof(GymContext))]
    [Migration("20250430162130_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("GymBackEnd.Entities.Attendances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("GymBackEnd.Entities.EmergencyContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("GymBackEnd.Entities.MembershipTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("GymBackEnd.Entities.PaymentMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MethodName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("GymBackEnd.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMehtodID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotlaFees")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentStatusID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Subscribers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmergencyContactID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkPlanID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkoutPlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmergencyContactID");

                    b.HasIndex("MembershipTypeID");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TrainerID");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Trainers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Spacialty")
                        .HasColumnType("TEXT");

                    b.Property<string>("availability")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("GymBackEnd.Entities.WorkoutPlanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkoutPlanStatus");
                });

            modelBuilder.Entity("GymBackEnd.Entities.WorkoutPlans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusID");

                    b.ToTable("WorkoutPlans");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Attendances", b =>
                {
                    b.HasOne("GymBackEnd.Entities.Subscribers", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Payments", b =>
                {
                    b.HasOne("GymBackEnd.Entities.PaymentMethods", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("GymBackEnd.Entities.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Subscribers", b =>
                {
                    b.HasOne("GymBackEnd.Entities.EmergencyContacts", "EmergencyContact")
                        .WithMany()
                        .HasForeignKey("EmergencyContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackEnd.Entities.MembershipTypes", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackEnd.Entities.Payments", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("GymBackEnd.Entities.Trainers", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerID");

                    b.HasOne("GymBackEnd.Entities.WorkoutPlans", "WorkoutPlan")
                        .WithMany()
                        .HasForeignKey("WorkoutPlanId");

                    b.Navigation("EmergencyContact");

                    b.Navigation("MembershipType");

                    b.Navigation("Payment");

                    b.Navigation("Trainer");

                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("GymBackEnd.Entities.WorkoutPlans", b =>
                {
                    b.HasOne("GymBackEnd.Entities.WorkoutPlanStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
