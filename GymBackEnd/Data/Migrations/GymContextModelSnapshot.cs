// <auto-generated />
using System;
using GymBackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymBackEnd.Data.Migrations
{
    [DbContext(typeof(GymContext))]
    partial class GymContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("GymBackEnd.Entities.Attendances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("GymBackEnd.Entities.EmergencyContacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Logs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("GymBackEnd.Entities.MembershipTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MembershipTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standard access, valid for 30 days",
                            Price = 30m,
                            Type = "Basic Monthly"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Standard access, valid for 1 year",
                            Price = 300m,
                            Type = "Basic Annual "
                        },
                        new
                        {
                            Id = 3,
                            Description = "Extra perks like personal training, sauna access, etc., valid for 30 days",
                            Price = 60m,
                            Type = "Premium Monthly"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All premium features, valid for 1 year",
                            Price = 600m,
                            Type = "Premium Annual"
                        },
                        new
                        {
                            Id = 5,
                            Description = "One-time access for a single day",
                            Price = 10m,
                            Type = "Day Pass"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Free limited access for new users",
                            Price = 0.0m,
                            Type = "Trial"
                        });
                });

            modelBuilder.Entity("GymBackEnd.Entities.PaymentMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MethodName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MethodName = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            MethodName = "Credit Card"
                        },
                        new
                        {
                            Id = 3,
                            MethodName = "Debit Card"
                        },
                        new
                        {
                            Id = 4,
                            MethodName = "Bank Transfer"
                        },
                        new
                        {
                            Id = 5,
                            MethodName = "Mobile Payment"
                        },
                        new
                        {
                            Id = 6,
                            MethodName = "Cryptocurrency"
                        });
                });

            modelBuilder.Entity("GymBackEnd.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Failed"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Refunded"
                        },
                        new
                        {
                            Id = 5,
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("GymBackEnd.Entities.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotlaFees")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("PaymentStatusID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Subscribers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmergencyContactID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmergencyContactID");

                    b.HasIndex("MembershipTypeID");

                    b.HasIndex("PaymentId");

                    b.HasIndex("TrainerID");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Trainers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Spacialty")
                        .HasColumnType("TEXT");

                    b.Property<string>("availability")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("GymBackEnd.Entities.WorkoutPlanStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkoutPlanStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Paused"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("GymBackEnd.Entities.WorkoutPlans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StatusID");

                    b.HasIndex("SubscriberID");

                    b.ToTable("WorkoutPlans");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Attendances", b =>
                {
                    b.HasOne("GymBackEnd.Entities.Subscribers", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Payments", b =>
                {
                    b.HasOne("GymBackEnd.Entities.PaymentMethods", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackEnd.Entities.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GymBackEnd.Entities.Subscribers", b =>
                {
                    b.HasOne("GymBackEnd.Entities.EmergencyContacts", "EmergencyContact")
                        .WithMany()
                        .HasForeignKey("EmergencyContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackEnd.Entities.MembershipTypes", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackEnd.Entities.Payments", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("GymBackEnd.Entities.Trainers", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerID");

                    b.Navigation("EmergencyContact");

                    b.Navigation("MembershipType");

                    b.Navigation("Payment");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymBackEnd.Entities.WorkoutPlans", b =>
                {
                    b.HasOne("GymBackEnd.Entities.WorkoutPlanStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackEnd.Entities.Subscribers", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Subscriber");
                });
#pragma warning restore 612, 618
        }
    }
}
